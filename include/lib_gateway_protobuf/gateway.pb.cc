// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#include "gateway.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace moos {
namespace gateway {
class FromGatewayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromGateway> _instance;
} _FromGateway_default_instance_;
class ToGatewayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToGateway> _instance;
} _ToGateway_default_instance_;
}  // namespace gateway
}  // namespace moos
static void InitDefaultsscc_info_FromGateway_gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::gateway::_FromGateway_default_instance_;
    new (ptr) ::moos::gateway::FromGateway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::gateway::FromGateway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FromGateway_gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FromGateway_gateway_2eproto}, {}};

static void InitDefaultsscc_info_ToGateway_gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::moos::gateway::_ToGateway_default_instance_;
    new (ptr) ::moos::gateway::ToGateway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::moos::gateway::ToGateway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToGateway_gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ToGateway_gateway_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gateway_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gateway_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gateway_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gateway_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, gateway_time_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, gateway_key_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, gateway_string_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::FromGateway, gateway_double_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, client_time_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, client_key_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, client_string_),
  PROTOBUF_FIELD_OFFSET(::moos::gateway::ToGateway, client_double_),
  2,
  0,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::moos::gateway::FromGateway)},
  { 13, 22, sizeof(::moos::gateway::ToGateway)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::gateway::_FromGateway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::moos::gateway::_ToGateway_default_instance_),
};

const char descriptor_table_protodef_gateway_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rgateway.proto\022\014moos.gateway\"h\n\013FromGat"
  "eway\022\024\n\014gateway_time\030\001 \001(\001\022\023\n\013gateway_ke"
  "y\030\002 \001(\t\022\026\n\016gateway_string\030\003 \001(\t\022\026\n\016gatew"
  "ay_double\030\004 \001(\001\"b\n\tToGateway\022\023\n\013client_t"
  "ime\030\001 \001(\001\022\022\n\nclient_key\030\002 \001(\t\022\025\n\rclient_"
  "string\030\003 \001(\t\022\025\n\rclient_double\030\004 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gateway_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gateway_2eproto_sccs[2] = {
  &scc_info_FromGateway_gateway_2eproto.base,
  &scc_info_ToGateway_gateway_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gateway_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_2eproto = {
  false, false, descriptor_table_protodef_gateway_2eproto, "gateway.proto", 235,
  &descriptor_table_gateway_2eproto_once, descriptor_table_gateway_2eproto_sccs, descriptor_table_gateway_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_gateway_2eproto::offsets,
  file_level_metadata_gateway_2eproto, 2, file_level_enum_descriptors_gateway_2eproto, file_level_service_descriptors_gateway_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gateway_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gateway_2eproto)), true);
namespace moos {
namespace gateway {

// ===================================================================

void FromGateway::InitAsDefaultInstance() {
}
class FromGateway::_Internal {
 public:
  using HasBits = decltype(std::declval<FromGateway>()._has_bits_);
  static void set_has_gateway_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gateway_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gateway_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gateway_double(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FromGateway::FromGateway(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.gateway.FromGateway)
}
FromGateway::FromGateway(const FromGateway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gateway_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gateway_key()) {
    gateway_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway_key(),
      GetArena());
  }
  gateway_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gateway_string()) {
    gateway_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gateway_string(),
      GetArena());
  }
  ::memcpy(&gateway_time_, &from.gateway_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&gateway_double_) -
    reinterpret_cast<char*>(&gateway_time_)) + sizeof(gateway_double_));
  // @@protoc_insertion_point(copy_constructor:moos.gateway.FromGateway)
}

void FromGateway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromGateway_gateway_2eproto.base);
  gateway_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gateway_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gateway_double_) -
      reinterpret_cast<char*>(&gateway_time_)) + sizeof(gateway_double_));
}

FromGateway::~FromGateway() {
  // @@protoc_insertion_point(destructor:moos.gateway.FromGateway)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FromGateway::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gateway_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FromGateway::ArenaDtor(void* object) {
  FromGateway* _this = reinterpret_cast< FromGateway* >(object);
  (void)_this;
}
void FromGateway::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FromGateway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromGateway& FromGateway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromGateway_gateway_2eproto.base);
  return *internal_default_instance();
}


void FromGateway::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.gateway.FromGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gateway_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gateway_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&gateway_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gateway_double_) -
        reinterpret_cast<char*>(&gateway_time_)) + sizeof(gateway_double_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FromGateway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double gateway_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gateway_time(&has_bits);
          gateway_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string gateway_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gateway_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moos.gateway.FromGateway.gateway_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gateway_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gateway_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moos.gateway.FromGateway.gateway_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gateway_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gateway_double(&has_bits);
          gateway_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FromGateway::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.gateway.FromGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gateway_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_gateway_time(), target);
  }

  // optional string gateway_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gateway_key().data(), static_cast<int>(this->_internal_gateway_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "moos.gateway.FromGateway.gateway_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gateway_key(), target);
  }

  // optional string gateway_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gateway_string().data(), static_cast<int>(this->_internal_gateway_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "moos.gateway.FromGateway.gateway_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gateway_string(), target);
  }

  // optional double gateway_double = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gateway_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.gateway.FromGateway)
  return target;
}

size_t FromGateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.gateway.FromGateway)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string gateway_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gateway_key());
    }

    // optional string gateway_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gateway_string());
    }

    // optional double gateway_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double gateway_double = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromGateway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.gateway.FromGateway)
  GOOGLE_DCHECK_NE(&from, this);
  const FromGateway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromGateway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.gateway.FromGateway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.gateway.FromGateway)
    MergeFrom(*source);
  }
}

void FromGateway::MergeFrom(const FromGateway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.gateway.FromGateway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gateway_key(from._internal_gateway_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gateway_string(from._internal_gateway_string());
    }
    if (cached_has_bits & 0x00000004u) {
      gateway_time_ = from.gateway_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      gateway_double_ = from.gateway_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FromGateway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.gateway.FromGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromGateway::CopyFrom(const FromGateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.gateway.FromGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromGateway::IsInitialized() const {
  return true;
}

void FromGateway::InternalSwap(FromGateway* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gateway_key_.Swap(&other->gateway_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_string_.Swap(&other->gateway_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FromGateway, gateway_double_)
      + sizeof(FromGateway::gateway_double_)
      - PROTOBUF_FIELD_OFFSET(FromGateway, gateway_time_)>(
          reinterpret_cast<char*>(&gateway_time_),
          reinterpret_cast<char*>(&other->gateway_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FromGateway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToGateway::InitAsDefaultInstance() {
}
class ToGateway::_Internal {
 public:
  using HasBits = decltype(std::declval<ToGateway>()._has_bits_);
  static void set_has_client_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_double(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ToGateway::ToGateway(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:moos.gateway.ToGateway)
}
ToGateway::ToGateway(const ToGateway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_key()) {
    client_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_key(),
      GetArena());
  }
  client_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_string()) {
    client_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_string(),
      GetArena());
  }
  ::memcpy(&client_time_, &from.client_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_double_) -
    reinterpret_cast<char*>(&client_time_)) + sizeof(client_double_));
  // @@protoc_insertion_point(copy_constructor:moos.gateway.ToGateway)
}

void ToGateway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToGateway_gateway_2eproto.base);
  client_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_double_) -
      reinterpret_cast<char*>(&client_time_)) + sizeof(client_double_));
}

ToGateway::~ToGateway() {
  // @@protoc_insertion_point(destructor:moos.gateway.ToGateway)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToGateway::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ToGateway::ArenaDtor(void* object) {
  ToGateway* _this = reinterpret_cast< ToGateway* >(object);
  (void)_this;
}
void ToGateway::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToGateway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToGateway& ToGateway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToGateway_gateway_2eproto.base);
  return *internal_default_instance();
}


void ToGateway::Clear() {
// @@protoc_insertion_point(message_clear_start:moos.gateway.ToGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&client_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_double_) -
        reinterpret_cast<char*>(&client_time_)) + sizeof(client_double_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToGateway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double client_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_client_time(&has_bits);
          client_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string client_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moos.gateway.ToGateway.client_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string client_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "moos.gateway.ToGateway.client_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double client_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_client_double(&has_bits);
          client_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToGateway::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:moos.gateway.ToGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double client_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_client_time(), target);
  }

  // optional string client_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_key().data(), static_cast<int>(this->_internal_client_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "moos.gateway.ToGateway.client_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_key(), target);
  }

  // optional string client_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_string().data(), static_cast<int>(this->_internal_client_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "moos.gateway.ToGateway.client_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_string(), target);
  }

  // optional double client_double = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_client_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:moos.gateway.ToGateway)
  return target;
}

size_t ToGateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:moos.gateway.ToGateway)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string client_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_key());
    }

    // optional string client_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_string());
    }

    // optional double client_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double client_double = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToGateway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:moos.gateway.ToGateway)
  GOOGLE_DCHECK_NE(&from, this);
  const ToGateway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToGateway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:moos.gateway.ToGateway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:moos.gateway.ToGateway)
    MergeFrom(*source);
  }
}

void ToGateway::MergeFrom(const ToGateway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:moos.gateway.ToGateway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_key(from._internal_client_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_string(from._internal_client_string());
    }
    if (cached_has_bits & 0x00000004u) {
      client_time_ = from.client_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_double_ = from.client_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToGateway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:moos.gateway.ToGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGateway::CopyFrom(const ToGateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:moos.gateway.ToGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGateway::IsInitialized() const {
  return true;
}

void ToGateway::InternalSwap(ToGateway* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_key_.Swap(&other->client_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_string_.Swap(&other->client_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToGateway, client_double_)
      + sizeof(ToGateway::client_double_)
      - PROTOBUF_FIELD_OFFSET(ToGateway, client_time_)>(
          reinterpret_cast<char*>(&client_time_),
          reinterpret_cast<char*>(&other->client_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToGateway::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gateway
}  // namespace moos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::moos::gateway::FromGateway* Arena::CreateMaybeMessage< ::moos::gateway::FromGateway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::gateway::FromGateway >(arena);
}
template<> PROTOBUF_NOINLINE ::moos::gateway::ToGateway* Arena::CreateMaybeMessage< ::moos::gateway::ToGateway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::moos::gateway::ToGateway >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
