// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gateway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_2eproto;
namespace moos {
namespace gateway {
class FromGateway;
class FromGatewayDefaultTypeInternal;
extern FromGatewayDefaultTypeInternal _FromGateway_default_instance_;
class ToGateway;
class ToGatewayDefaultTypeInternal;
extern ToGatewayDefaultTypeInternal _ToGateway_default_instance_;
}  // namespace gateway
}  // namespace moos
PROTOBUF_NAMESPACE_OPEN
template<> ::moos::gateway::FromGateway* Arena::CreateMaybeMessage<::moos::gateway::FromGateway>(Arena*);
template<> ::moos::gateway::ToGateway* Arena::CreateMaybeMessage<::moos::gateway::ToGateway>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace moos {
namespace gateway {

// ===================================================================

class FromGateway PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.gateway.FromGateway) */ {
 public:
  inline FromGateway() : FromGateway(nullptr) {};
  virtual ~FromGateway();

  FromGateway(const FromGateway& from);
  FromGateway(FromGateway&& from) noexcept
    : FromGateway() {
    *this = ::std::move(from);
  }

  inline FromGateway& operator=(const FromGateway& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromGateway& operator=(FromGateway&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromGateway* internal_default_instance() {
    return reinterpret_cast<const FromGateway*>(
               &_FromGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FromGateway& a, FromGateway& b) {
    a.Swap(&b);
  }
  inline void Swap(FromGateway* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromGateway* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromGateway* New() const final {
    return CreateMaybeMessage<FromGateway>(nullptr);
  }

  FromGateway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromGateway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromGateway& from);
  void MergeFrom(const FromGateway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromGateway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.gateway.FromGateway";
  }
  protected:
  explicit FromGateway(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGatewayKeyFieldNumber = 2,
    kGatewayStringFieldNumber = 3,
    kGatewayTimeFieldNumber = 1,
    kGatewayDoubleFieldNumber = 4,
  };
  // optional string gateway_key = 2;
  bool has_gateway_key() const;
  private:
  bool _internal_has_gateway_key() const;
  public:
  void clear_gateway_key();
  const std::string& gateway_key() const;
  void set_gateway_key(const std::string& value);
  void set_gateway_key(std::string&& value);
  void set_gateway_key(const char* value);
  void set_gateway_key(const char* value, size_t size);
  std::string* mutable_gateway_key();
  std::string* release_gateway_key();
  void set_allocated_gateway_key(std::string* gateway_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gateway_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gateway_key(
      std::string* gateway_key);
  private:
  const std::string& _internal_gateway_key() const;
  void _internal_set_gateway_key(const std::string& value);
  std::string* _internal_mutable_gateway_key();
  public:

  // optional string gateway_string = 3;
  bool has_gateway_string() const;
  private:
  bool _internal_has_gateway_string() const;
  public:
  void clear_gateway_string();
  const std::string& gateway_string() const;
  void set_gateway_string(const std::string& value);
  void set_gateway_string(std::string&& value);
  void set_gateway_string(const char* value);
  void set_gateway_string(const char* value, size_t size);
  std::string* mutable_gateway_string();
  std::string* release_gateway_string();
  void set_allocated_gateway_string(std::string* gateway_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gateway_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gateway_string(
      std::string* gateway_string);
  private:
  const std::string& _internal_gateway_string() const;
  void _internal_set_gateway_string(const std::string& value);
  std::string* _internal_mutable_gateway_string();
  public:

  // optional double gateway_time = 1;
  bool has_gateway_time() const;
  private:
  bool _internal_has_gateway_time() const;
  public:
  void clear_gateway_time();
  double gateway_time() const;
  void set_gateway_time(double value);
  private:
  double _internal_gateway_time() const;
  void _internal_set_gateway_time(double value);
  public:

  // optional double gateway_double = 4;
  bool has_gateway_double() const;
  private:
  bool _internal_has_gateway_double() const;
  public:
  void clear_gateway_double();
  double gateway_double() const;
  void set_gateway_double(double value);
  private:
  double _internal_gateway_double() const;
  void _internal_set_gateway_double(double value);
  public:

  // @@protoc_insertion_point(class_scope:moos.gateway.FromGateway)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_string_;
  double gateway_time_;
  double gateway_double_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ToGateway PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moos.gateway.ToGateway) */ {
 public:
  inline ToGateway() : ToGateway(nullptr) {};
  virtual ~ToGateway();

  ToGateway(const ToGateway& from);
  ToGateway(ToGateway&& from) noexcept
    : ToGateway() {
    *this = ::std::move(from);
  }

  inline ToGateway& operator=(const ToGateway& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToGateway& operator=(ToGateway&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToGateway* internal_default_instance() {
    return reinterpret_cast<const ToGateway*>(
               &_ToGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ToGateway& a, ToGateway& b) {
    a.Swap(&b);
  }
  inline void Swap(ToGateway* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToGateway* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToGateway* New() const final {
    return CreateMaybeMessage<ToGateway>(nullptr);
  }

  ToGateway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToGateway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToGateway& from);
  void MergeFrom(const ToGateway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToGateway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moos.gateway.ToGateway";
  }
  protected:
  explicit ToGateway(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientKeyFieldNumber = 2,
    kClientStringFieldNumber = 3,
    kClientTimeFieldNumber = 1,
    kClientDoubleFieldNumber = 4,
  };
  // optional string client_key = 2;
  bool has_client_key() const;
  private:
  bool _internal_has_client_key() const;
  public:
  void clear_client_key();
  const std::string& client_key() const;
  void set_client_key(const std::string& value);
  void set_client_key(std::string&& value);
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  std::string* mutable_client_key();
  std::string* release_client_key();
  void set_allocated_client_key(std::string* client_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_key(
      std::string* client_key);
  private:
  const std::string& _internal_client_key() const;
  void _internal_set_client_key(const std::string& value);
  std::string* _internal_mutable_client_key();
  public:

  // optional string client_string = 3;
  bool has_client_string() const;
  private:
  bool _internal_has_client_string() const;
  public:
  void clear_client_string();
  const std::string& client_string() const;
  void set_client_string(const std::string& value);
  void set_client_string(std::string&& value);
  void set_client_string(const char* value);
  void set_client_string(const char* value, size_t size);
  std::string* mutable_client_string();
  std::string* release_client_string();
  void set_allocated_client_string(std::string* client_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_string(
      std::string* client_string);
  private:
  const std::string& _internal_client_string() const;
  void _internal_set_client_string(const std::string& value);
  std::string* _internal_mutable_client_string();
  public:

  // optional double client_time = 1;
  bool has_client_time() const;
  private:
  bool _internal_has_client_time() const;
  public:
  void clear_client_time();
  double client_time() const;
  void set_client_time(double value);
  private:
  double _internal_client_time() const;
  void _internal_set_client_time(double value);
  public:

  // optional double client_double = 4;
  bool has_client_double() const;
  private:
  bool _internal_has_client_double() const;
  public:
  void clear_client_double();
  double client_double() const;
  void set_client_double(double value);
  private:
  double _internal_client_double() const;
  void _internal_set_client_double(double value);
  public:

  // @@protoc_insertion_point(class_scope:moos.gateway.ToGateway)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_string_;
  double client_time_;
  double client_double_;
  friend struct ::TableStruct_gateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FromGateway

// optional double gateway_time = 1;
inline bool FromGateway::_internal_has_gateway_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FromGateway::has_gateway_time() const {
  return _internal_has_gateway_time();
}
inline void FromGateway::clear_gateway_time() {
  gateway_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FromGateway::_internal_gateway_time() const {
  return gateway_time_;
}
inline double FromGateway::gateway_time() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_time)
  return _internal_gateway_time();
}
inline void FromGateway::_internal_set_gateway_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  gateway_time_ = value;
}
inline void FromGateway::set_gateway_time(double value) {
  _internal_set_gateway_time(value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_time)
}

// optional string gateway_key = 2;
inline bool FromGateway::_internal_has_gateway_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FromGateway::has_gateway_key() const {
  return _internal_has_gateway_key();
}
inline void FromGateway::clear_gateway_key() {
  gateway_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FromGateway::gateway_key() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_key)
  return _internal_gateway_key();
}
inline void FromGateway::set_gateway_key(const std::string& value) {
  _internal_set_gateway_key(value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_key)
}
inline std::string* FromGateway::mutable_gateway_key() {
  // @@protoc_insertion_point(field_mutable:moos.gateway.FromGateway.gateway_key)
  return _internal_mutable_gateway_key();
}
inline const std::string& FromGateway::_internal_gateway_key() const {
  return gateway_key_.Get();
}
inline void FromGateway::_internal_set_gateway_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gateway_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromGateway::set_gateway_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gateway_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.FromGateway.gateway_key)
}
inline void FromGateway::set_gateway_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gateway_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:moos.gateway.FromGateway.gateway_key)
}
inline void FromGateway::set_gateway_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gateway_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.FromGateway.gateway_key)
}
inline std::string* FromGateway::_internal_mutable_gateway_key() {
  _has_bits_[0] |= 0x00000001u;
  return gateway_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromGateway::release_gateway_key() {
  // @@protoc_insertion_point(field_release:moos.gateway.FromGateway.gateway_key)
  if (!_internal_has_gateway_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gateway_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromGateway::set_allocated_gateway_key(std::string* gateway_key) {
  if (gateway_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gateway_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.FromGateway.gateway_key)
}
inline std::string* FromGateway::unsafe_arena_release_gateway_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:moos.gateway.FromGateway.gateway_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return gateway_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromGateway::unsafe_arena_set_allocated_gateway_key(
    std::string* gateway_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gateway_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gateway_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gateway_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.gateway.FromGateway.gateway_key)
}

// optional string gateway_string = 3;
inline bool FromGateway::_internal_has_gateway_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FromGateway::has_gateway_string() const {
  return _internal_has_gateway_string();
}
inline void FromGateway::clear_gateway_string() {
  gateway_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FromGateway::gateway_string() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_string)
  return _internal_gateway_string();
}
inline void FromGateway::set_gateway_string(const std::string& value) {
  _internal_set_gateway_string(value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_string)
}
inline std::string* FromGateway::mutable_gateway_string() {
  // @@protoc_insertion_point(field_mutable:moos.gateway.FromGateway.gateway_string)
  return _internal_mutable_gateway_string();
}
inline const std::string& FromGateway::_internal_gateway_string() const {
  return gateway_string_.Get();
}
inline void FromGateway::_internal_set_gateway_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gateway_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromGateway::set_gateway_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gateway_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.FromGateway.gateway_string)
}
inline void FromGateway::set_gateway_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gateway_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:moos.gateway.FromGateway.gateway_string)
}
inline void FromGateway::set_gateway_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gateway_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.FromGateway.gateway_string)
}
inline std::string* FromGateway::_internal_mutable_gateway_string() {
  _has_bits_[0] |= 0x00000002u;
  return gateway_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromGateway::release_gateway_string() {
  // @@protoc_insertion_point(field_release:moos.gateway.FromGateway.gateway_string)
  if (!_internal_has_gateway_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gateway_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromGateway::set_allocated_gateway_string(std::string* gateway_string) {
  if (gateway_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gateway_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.FromGateway.gateway_string)
}
inline std::string* FromGateway::unsafe_arena_release_gateway_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:moos.gateway.FromGateway.gateway_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return gateway_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromGateway::unsafe_arena_set_allocated_gateway_string(
    std::string* gateway_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gateway_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gateway_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gateway_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.gateway.FromGateway.gateway_string)
}

// optional double gateway_double = 4;
inline bool FromGateway::_internal_has_gateway_double() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FromGateway::has_gateway_double() const {
  return _internal_has_gateway_double();
}
inline void FromGateway::clear_gateway_double() {
  gateway_double_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FromGateway::_internal_gateway_double() const {
  return gateway_double_;
}
inline double FromGateway::gateway_double() const {
  // @@protoc_insertion_point(field_get:moos.gateway.FromGateway.gateway_double)
  return _internal_gateway_double();
}
inline void FromGateway::_internal_set_gateway_double(double value) {
  _has_bits_[0] |= 0x00000008u;
  gateway_double_ = value;
}
inline void FromGateway::set_gateway_double(double value) {
  _internal_set_gateway_double(value);
  // @@protoc_insertion_point(field_set:moos.gateway.FromGateway.gateway_double)
}

// -------------------------------------------------------------------

// ToGateway

// optional double client_time = 1;
inline bool ToGateway::_internal_has_client_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToGateway::has_client_time() const {
  return _internal_has_client_time();
}
inline void ToGateway::clear_client_time() {
  client_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ToGateway::_internal_client_time() const {
  return client_time_;
}
inline double ToGateway::client_time() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_time)
  return _internal_client_time();
}
inline void ToGateway::_internal_set_client_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  client_time_ = value;
}
inline void ToGateway::set_client_time(double value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_time)
}

// optional string client_key = 2;
inline bool ToGateway::_internal_has_client_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToGateway::has_client_key() const {
  return _internal_has_client_key();
}
inline void ToGateway::clear_client_key() {
  client_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToGateway::client_key() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_key)
  return _internal_client_key();
}
inline void ToGateway::set_client_key(const std::string& value) {
  _internal_set_client_key(value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_key)
}
inline std::string* ToGateway::mutable_client_key() {
  // @@protoc_insertion_point(field_mutable:moos.gateway.ToGateway.client_key)
  return _internal_mutable_client_key();
}
inline const std::string& ToGateway::_internal_client_key() const {
  return client_key_.Get();
}
inline void ToGateway::_internal_set_client_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToGateway::set_client_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.ToGateway.client_key)
}
inline void ToGateway::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:moos.gateway.ToGateway.client_key)
}
inline void ToGateway::set_client_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.ToGateway.client_key)
}
inline std::string* ToGateway::_internal_mutable_client_key() {
  _has_bits_[0] |= 0x00000001u;
  return client_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToGateway::release_client_key() {
  // @@protoc_insertion_point(field_release:moos.gateway.ToGateway.client_key)
  if (!_internal_has_client_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToGateway::set_allocated_client_key(std::string* client_key) {
  if (client_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.ToGateway.client_key)
}
inline std::string* ToGateway::unsafe_arena_release_client_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:moos.gateway.ToGateway.client_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return client_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToGateway::unsafe_arena_set_allocated_client_key(
    std::string* client_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.gateway.ToGateway.client_key)
}

// optional string client_string = 3;
inline bool ToGateway::_internal_has_client_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToGateway::has_client_string() const {
  return _internal_has_client_string();
}
inline void ToGateway::clear_client_string() {
  client_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ToGateway::client_string() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_string)
  return _internal_client_string();
}
inline void ToGateway::set_client_string(const std::string& value) {
  _internal_set_client_string(value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_string)
}
inline std::string* ToGateway::mutable_client_string() {
  // @@protoc_insertion_point(field_mutable:moos.gateway.ToGateway.client_string)
  return _internal_mutable_client_string();
}
inline const std::string& ToGateway::_internal_client_string() const {
  return client_string_.Get();
}
inline void ToGateway::_internal_set_client_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToGateway::set_client_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:moos.gateway.ToGateway.client_string)
}
inline void ToGateway::set_client_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:moos.gateway.ToGateway.client_string)
}
inline void ToGateway::set_client_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:moos.gateway.ToGateway.client_string)
}
inline std::string* ToGateway::_internal_mutable_client_string() {
  _has_bits_[0] |= 0x00000002u;
  return client_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToGateway::release_client_string() {
  // @@protoc_insertion_point(field_release:moos.gateway.ToGateway.client_string)
  if (!_internal_has_client_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToGateway::set_allocated_client_string(std::string* client_string) {
  if (client_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:moos.gateway.ToGateway.client_string)
}
inline std::string* ToGateway::unsafe_arena_release_client_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:moos.gateway.ToGateway.client_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return client_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToGateway::unsafe_arena_set_allocated_client_string(
    std::string* client_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:moos.gateway.ToGateway.client_string)
}

// optional double client_double = 4;
inline bool ToGateway::_internal_has_client_double() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToGateway::has_client_double() const {
  return _internal_has_client_double();
}
inline void ToGateway::clear_client_double() {
  client_double_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ToGateway::_internal_client_double() const {
  return client_double_;
}
inline double ToGateway::client_double() const {
  // @@protoc_insertion_point(field_get:moos.gateway.ToGateway.client_double)
  return _internal_client_double();
}
inline void ToGateway::_internal_set_client_double(double value) {
  _has_bits_[0] |= 0x00000008u;
  client_double_ = value;
}
inline void ToGateway::set_client_double(double value) {
  _internal_set_client_double(value);
  // @@protoc_insertion_point(field_set:moos.gateway.ToGateway.client_double)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gateway
}  // namespace moos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
